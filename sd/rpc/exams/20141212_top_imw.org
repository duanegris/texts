
#+TITLE:     IMW: TOP middleware - année 2014-2015 - 12 déc. 2014
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+LINK_UP:
#+LINK_HOME:

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/worg.css" />


#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+LaTeX_CLASS: article


#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Table of Contents}\tableofcontents[currentsection]\end{frame}}


#+LATEX_HEADER: \lstset{
#+LATEX_HEADER:         keywordstyle=\color{blue},
#+LATEX_HEADER:         commentstyle=\color{red},
#+LATEX_HEADER:         stringstyle=\color{green},
#+LATEX_HEADER:         basicstyle=\ttfamily\small,
#+LATEX_HEADER:         columns=fullflexible,
#+LATEX_HEADER:         frame=single,
#+LATEX_HEADER:         basewidth={0.5em,0.4em}
#+LATEX_HEADER:         }

#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}


* Sujet 

On souhaite réaliser un système client-serveur pour gérer un ensemble de comptes
clients. Un  client peut créer  un compte auquel est  associé un nom. Il pourra
éventuellement le supprimer.  Le client aura ensuite à disposition  3 services à
disposition  :   ajout  d'argent,  retrait  d'argent,   listing  des  opérations
effectuées depuis la création du compte.

Lorsque que le client fait la demande création de compte, il se voit retourner
par le serveur un numéro de compte unique ainsi qu'une clé secrète qui prend la
forme d'un entier unique. Vous pourrez utiliser pour implémenter cela côté
serveur, la classe [[https://docs.oracle.com/javase/1.5.0/docs/api/java/util/UUID.html][java.util.UUID]] (disponible à partir de java 1.5) qui possède
une méthode =toString()=. Toute opération sur le compte devra ensuite passer
en paramètre le numéro de compte et cette clé secrète.


On souhaite définir les méthodes RPC ci-dessous :

#+ATTR_HTML: :border 2  :frame border
|-----------------+----------------------------------------------------------------------------------------------|
| méthode         | description                                                                                  |
|-----------------+----------------------------------------------------------------------------------------------|
| =createAccount= | demande la création d'un compte sur le serveur. En entrée le client passe le nom             |
|                 | (une chaine de caractères) et en cas de succès, le serveur renvoie un numéro de              |
|                 | compte ainsi qu'une clé secrète (uuid). En cas d'échec (par exemple trop de comptes          |
|                 | créés, le serveur renvoie null.                                                              |
|-----------------+----------------------------------------------------------------------------------------------|
| =deleteAccount= | demande la suppression du compte. On passe en entrée le numér ode compte et la clé           |
|                 | secrète. Le serveur renvoie le solde du compte                                               |
|-----------------+----------------------------------------------------------------------------------------------|
| =creditAccount= | Etant donné un numéro de compte, sa clé secrète, et un montant, ajoute cette somme           |
|                 | sur le compte. Retourne la somme sur le compte après l'opération.                            |
|-----------------+----------------------------------------------------------------------------------------------|
| =debitAccount=  | Etant donné un numéro de compte, sa clé secrète, et un montant, ajoute cette somme           |
|                 | sur le compte. Retourne la somme sur le compte après l'opération.                            |
|-----------------+----------------------------------------------------------------------------------------------|
| =listOpAccount= | Etant donné un numéro de compte et sa clé secrète, rend la liste  les opérations             |
|                 | (crédits, débits) qui ont été effectuées dans l'ordre chronologique plus une ligne de solde. |
|                 |                                                                                              |
|-----------------+----------------------------------------------------------------------------------------------|
  

* Travail à faire

Implémenter ces services en Java RMI ou CORBA Java.

** Serveur et Services

Vous écrirez, les fichiers suivants, selon que vous choisissez CORBA ou RMI :
#+ATTR_HTML: :border 2  :frame border
|-----------+---------------------------------------------------+---------------------------------------------------|
|           | CORBA                                             | RMI                                               |
|-----------+---------------------------------------------------+---------------------------------------------------|
| interface | Fichier IDL: =AccountService.idl=                 | Interface: =AccountService.java=                  |
|-----------+---------------------------------------------------+---------------------------------------------------|
| client    | Logique du client: =AccountClient.java=           | Logique du client: =AccountClient.java=           |
|-----------+---------------------------------------------------+---------------------------------------------------|
| server    | - Logique des services: =AccountServiceImpl.java= | - Logique des services: =AccountServiceImpl.java= |
|           | - Enregistrement dans l'annuaire Naming Service   | - Enregistrement dans l'annuaire /rmiregistry/    |
|           | et activation de l'objet: =AccountServer.java=    | et activation de l'objet: =AccountServer.java=    |
|-----------+---------------------------------------------------+---------------------------------------------------|


** Logique Client

Pour le côté client, vous écrirez les 2 scénarios suivants (soit l'un à la
suite de l'autre, soit dans 2 classes différentes =AccountClient1=,
=AccountClient2=)  :
 
1. Un client créé un compte, ajoute 250,00 Eur, ajoute 130,00 Eur, retire 230
  Eur, ferme le compte.
2. Un client créé un compte $C_1$, crédite ce compte de 100 Eur. A la suite, le client
   créé un deuxième compte $C_2$, crédite $C_2$ de 200 Eur. Le compte $C_1$ est
   ensuite débité de 50 Eur, puis le compté $C_2$ débité de 50 Eur.
   On demande ensuite la liste des opérations sur $C_1$, puis la liste des
   opérations sur le compte $C_2$.


