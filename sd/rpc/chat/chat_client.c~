/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "chat.h"
#define MAX_MSG_SIZE 256


/**
 * display
 **/
void display( int *fromid, CLIENT *clnt ) {
	msg_list  *ml;
      int i;

	ml = refresh_1(fromid, clnt);
	if (ml == NULL) {
		clnt_perror(clnt, "call failed:");
	}
      printf("-> %d messages in list\n",ml->msg_list_len);
      for (i=0;i<ml->msg_list_len;i++) {
		printf("[#%d] %s\n",ml->msg_list_val[i].cli_id,
				        ml->msg_list_val[i].message);
	}
}

/**
 * Grab the messages at the keyboard and send them to the server.
 * @param myid the number of the connected client (only for info)
 * @param clnt the generated structure from rpcgen to handle connection to the server
 * @return none
 **/
void messaging(int myid, CLIENT *clnt) {
	int  *msgid;      
	message  send_1_arg;
	char *inputmsg;
	
	inputmsg= malloc(MAX_MSG_SIZE);
	strcpy(inputmsg,"init");
	while (strlen(inputmsg) > 1) {
		printf("[client-%d] >",myid);
		inputmsg = fgets(inputmsg,MAX_MSG_SIZE,stdin);
		send_1_arg.message = inputmsg;
		send_1_arg.cli_id = myid;
		send_1_arg.timestamp=0;
		/* send message, and server returns the global nessage id */
		msgid = send_1(&send_1_arg, clnt);
		if (msgid == NULL) 
			clnt_perror(clnt, "call failed:");
		/* call a function to display returned messages */
		//display( msgid, clnt );
	}
	free(inputmsg);
}

void
chat_1( char* host )
{
	CLIENT *clnt;
	void  *result_1;
	char  *chat_null_1_arg;
	int   *retcode;
	int   myid;
	char  *connect_1_arg;
	int  *result_3;
	int  disconnect_1_arg;
	clnt = clnt_create(host, CHAT, VERSION_ONE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror(host);
		exit(1);
	}

	/* First, connect to the server to retrieve an id */
	retcode = connect_1((void*)&connect_1_arg, clnt);
	if (retcode == NULL) {
		clnt_perror(clnt, "call failed:");
	}
      else {
		 myid = *retcode;
		 if (myid==-1) {
		 	printf("[client] could not get an id from the server (too many clients?)\n");
			exit(-1);
		 }
		 else 
		 	printf("[client] i am connected with id=%d\n",myid);
      }
      /* iterate to get input message until an empty string is entered */
      messaging( myid, clnt );

      /* finally, gently disconnect to make room */ 
	result_3 = disconnect_1(&disconnect_1_arg, clnt);
	printf("[client] disconnecting from server ...\n");
	if (result_3 == NULL) {
		clnt_perror(clnt, "call failed:");
	}
	clnt_destroy( clnt );
}


main( int argc, char* argv[] )
{
	char *host;

	if(argc < 2) {
		printf("usage: %s server_host\n", argv[0]);
		exit(1);
	}
	host = argv[1];
	chat_1( host );
}
