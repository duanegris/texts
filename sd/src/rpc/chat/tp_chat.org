#+TITLE: Simple Chat System in RPC 


* Introduction

The aim of the work is to design and implement a simple chat system.
Once the client has run its client text interface, he/she is prompted
to enter a message. The message is sent once 'Enter' is pressed. 
Messages from other connected clients are displayed only after 
he/she sends a message (in this simplified system, this avoids the need
to have a concurrent thread whose role would be to permanently monitor and
display incoming messages).

* Interface Guidline

The  following  interface (=chat.x=)  is  proposed  to  define the  simple  chat
service.  The client  would have  to  =connect= to  the system,  use the  =send=
operation each time he/she wants to emit a message, and eventually =disconnect=.


#+begin_src C
struct message {
	int cli_id;
	string message<>;
        int msg_id;
};

typedef struct message message;
typedef message msg_list<99>;

program CHAT{
  version VERSION_ONE{
    void CHAT_NULL(void) = 0;
    int CONNECT() = 1;
    int DISCONNECT(int) = 2;
    int SEND(message) = 3;
    msg_list REFRESH(int) = 4; 
  } = 1;
} = 0x20000001;
#+end_src



The last operation is the =refresh=  operation, which is responsible to get from
the server the messages sent by  others.  The parameter proposed for the refresh
operation corresponds to the latest message  id known (and already displayed) by
the client.

It is suggested  that the =send= message  checks for new message  in the system,
after returning from the send operation and  before prompting the user for a new
message.

