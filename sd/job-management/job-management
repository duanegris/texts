
DRMAA v2, spec doit terminer en dec 2009
résout un ensemble de problèmes de la v1, en IDL

DRMAA v1, current GFD.133
------------------------
DRMAA 1.0 is limited to job submission, job monitoring and control, and retrieval of
the finished job status

- la librairie devrait etre thread-safe
- synchronisme: "... blocking on the wait call for a specific job request"
- Job Categories : pour abstraire les détails de soumission. Un admin de site 
  peut créer une catégorie "X" correspondant à une gestion spécifique, par exemple
  oarsub -p "memnode=4096" pourrait être un catégorie

- job template: un modèle de job qui permet d'instancier des jobs.
      constitué d'attributs. 
      Obligatoires:
            • Remote command to execute
            • Remote command input parameters, a vector parameter
            • Job state at submission
            • Job environment, a vector parameter
            • Job working directory
            • Job category
            • Native specification
            • Standard input, output, and error streams
            • Join output and error streams
            • E-mail distribution list to report the job completion and status, a vector parameter
            • E-mail suppression
            • Job start time
            • Job name to be used for the job submission







DRMAA

Develop an API specification for the submission and control of jobs to one or more Distributed Resource Management (DRM) systems. The scope of this specification is all the high level functionality which is necessary for an application to consign a job to a DRM system including common operations on jobs like termination or suspension.


API interfaces:

Session Management
Job Session
Job
DrmaaCallback
JobInfo




interface SessionManager{
      readonly attribute string drmsInfo;
      readonly attribute Version version;

      JobSession createJobSession(in string sessionName, in string contactString)
      void closeJobSession(in JobSession s)
      void destroyJobSession(in string sessionName)
      string[] getJobSessions()
      MonitoringSession createMonitoringSession (in string contactString)
      void closeMonitoringSession(in MonitoringSession s)
 }


 -> possiblité de créer une/plusieurs sessions sur un/plusieurs DRM
 -> distinction entre monitoring machine et gestion de job


interface JobSession{
      readonly attribute string contact;

      void registerEventNotification(in DrmaaCallback callback)
      raises UnsupportedFeatureExeption, ....
      JobTemplate createJobTemplate()
      void deleteJobTemplate(in DRMAA::JobTemplate jobTemplate)
      Job runJob(in DRMAA::JobTemplate jobTemplate)
      sequence<Job> runBulkJobs(...)
      sequence<Job> waitAnyStarted(in sequence<Job> jobs, in long long timeout)
      sequence<Job> waitAnyTerminated(in sequence<Job> jobs, in long long timeout)
};

-> waitAnyStarted(): Wait for one of the „start states“ to happen
      - running, *_suspended
-> waitAnyTerminated(): Wait for FAILED / DONE to happen


interface Job {
      void suspend()
      void resume()
      void hold()
      void release()
      void terminate()
      JobState getState(out native subState)
      void waitStarted(in long long timeout)
      void waitTerminated(in long long timeout)
      JobInfo getInfo()
};



interface JobInfo {
      readonly attribute Dictionary resourceUsage;
      readonly attribute boolean hasExited;
      readonly attribute long exitStatus;
... [old DRMAA1 job information] ...
      readonly attribute JobState jobState;
      readonly attribute string jobSubState;
      readonly attribute string masterMachine;
      readonly attribute string[] slaveMachines;
      readonly attribute string submissionMachine;
      readonly attribute string jobOwner;
      // amount of time since job was started
      readonly attribute long wallclockTime;
      // amount of time remaining until the job will be terminated
      readonly attribute long wallclockLimit;
      // amount of CPU seconds consumed
      readonly attribute long cpuTime;
      // and so on for submission time, dispatch time, start time, finish time,
      // memory usage and limits
...
};


A


Bindings pour 
- Python
- C
- Java 
